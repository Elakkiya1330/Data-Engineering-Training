CREATE DATABASE FITNESS_TRACKER;
USE FITNESS_TRACKER;
CREATE TABLE EXERCISES (
    EXERCISE_ID INT PRIMARY KEY,
    EXERCISE_NAME VARCHAR(50),
    CATEGORY VARCHAR(20),
    CALORIES_BURN_PER_MIN INT);
CREATE TABLE WORKOUTLOG (
    LOG_ID INT PRIMARY KEY,
    EXERCISE_ID INT,
    DATE DATE,
    DURATION_MIN INT,
    MOOD VARCHAR(20),
    FOREIGN KEY (EXERCISE_ID) REFERENCES EXERCISES(EXERCISE_ID));
-- Insert at least 5 different exercises.
INSERT INTO EXERCISES VALUES
(1, 'RUNNING', 'CARDIO', 10),
(2, 'CYCLING', 'CARDIO', 8),
(3, 'YOGA', 'FLEXIBILITY', 4),
(4, 'WEIGHT LIFTING', 'STRENGTH', 6),
(5, 'JUMP ROPE', 'CARDIO', 12),
(6, 'ROWING', 'CARDIO', 9);
-- Log at least 2 workouts per exercise across different days.
INSERT INTO WORKOUTLOG VALUES
(1, 1, '2025-07-20', 30, 'ENERGIZED'),
(2, 1, '2025-05-22', 25, 'NORMAL'),
(3, 2, '2025-07-19', 45, 'TIRED'),
(4, 2, '2025-04-23', 50, 'ENERGIZED'),
(5, 3, '2025-07-18', 40, 'NORMAL'),
(6, 3, '2025-06-21', 35, 'RELAXED'),
(7, 4, '2025-07-17', 60, 'ENERGIZED'),
(8, 4, '2025-06-22', 55, 'TIRED'),
(9, 5, '2025-07-19', 30, 'NORMAL'),
(10, 5, '2025-07-24', 40, 'ENERGIZED'),
(11, 1, '2025-03-15', 20, 'NORMAL'),
(12, 2, '2024-02-10', 40, 'TIRED');
-- Basic Queries
--  1. Show all exercises under the “Cardio” category.
SELECT * FROM EXERCISES WHERE CATEGORY = 'CARDIO';
--  2. Show workouts done in the month of March 2025.
SELECT * FROM WORKOUTLOG WHERE DATE BETWEEN '2025-03-01' AND '2025-03-31';

--  Calculations
--  3. Calculate total calories burned per workout (duration × calories_burn_per_min).
SELECT W.LOG_ID, E.EXERCISE_NAME, W.DURATION_MIN, (W.DURATION_MIN * E.CALORIES_BURN_PER_MIN) AS CALORIES_BURNED FROM EXERCISES E 
JOIN WORKOUTLOG W ON E.EXERCISE_ID = W.EXERCISE_ID ORDER BY LOG_ID ASC;
--  4. Calculate average workout duration per category.
SELECT E.CATEGORY, ROUND(AVG(W.DURATION_MIN)) AS AVG_DURATION_MIN FROM EXERCISES E
JOIN WORKOUTLOG W ON E.EXERCISE_ID = W.EXERCISE_ID GROUP BY E.CATEGORY;

--  JOIN + Aggregation
--  5. List exercise name, date, duration, and calories burned using a join.
SELECT E.EXERCISE_NAME, W.DATE, W.DURATION_MIN, (W.DURATION_MIN * E.CALORIES_BURN_PER_MIN) AS CALORIES_BURNED FROM EXERCISES E 
JOIN WORKOUTLOG W ON E.EXERCISE_ID = W.EXERCISE_ID;
--  6. Show total calories burned per day.
SELECT W.DATE, SUM(W.DURATION_MIN * E.CALORIES_BURN_PER_MIN) AS CALORIES_BURNED FROM EXERCISES E
JOIN WORKOUTLOG W ON E.EXERCISE_ID = W.EXERCISE_ID GROUP BY W.DATE;

--  Subqueries
--  7. Find the exercise that burned the most calories in total.
SELECT EXERCISE_NAME FROM EXERCISES WHERE EXERCISE_ID = (SELECT W.EXERCISE_ID FROM WORKOUTLOG W JOIN EXERCISES E ON W.EXERCISE_ID = E.EXERCISE_ID 
GROUP BY W.EXERCISE_ID ORDER BY SUM(W.DURATION_MIN * E.CALORIES_BURN_PER_MIN) DESC LIMIT 1);
--  8. List exercises never logged in the workout log.
SELECT * FROM EXERCISES WHERE EXERCISE_ID NOT IN (SELECT EXERCISE_ID FROM WORKOUTLOG);

--  Conditional + Text Filters
--  9. Show workouts where mood was “Tired” and duration > 30 mins.
SELECT * FROM WORKOUTLOG WHERE MOOD = 'TIRED' AND DURATION_MIN > 30;
--  10. Update a workout log to correct a wrongly entered mood.
UPDATE WORKOUTLOG SET MOOD = 'NORMAL' WHERE LOG_ID = 4;

--  Update & Delete
--  11. Update the calories per minute for “Running”.
UPDATE EXERCISES SET CALORIES_BURN_PER_MIN = 15 WHERE EXERCISE_NAME = 'RUNNING';
--  12. Delete all logs from February 2024.
DELETE FROM WORKOUTLOG WHERE DATE BETWEEN '2024-02-01' AND '2024-02-29';