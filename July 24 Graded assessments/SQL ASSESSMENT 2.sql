CREATE DATABASE TRAVEL_PLANNER;
USE TRAVEL_PLANNER;
CREATE TABLE DESTINATIONS (
    DESTINATION_ID INT PRIMARY KEY,
    CITY VARCHAR(50),
    COUNTRY VARCHAR(50),
    CATEGORY VARCHAR(20),
    AVG_COST_PER_DAY INT
);
CREATE TABLE TRIPS (
    TRIP_ID INT PRIMARY KEY,
    DESTINATION_ID INT,
    TRAVELER_NAME VARCHAR(50),
    START_DATE DATE,
    END_DATE DATE,
    BUDGET INT,
    FOREIGN KEY (DESTINATION_ID) REFERENCES DESTINATIONS(DESTINATION_ID)
);
-- Add at least 6 destinations across 4 different countries.
INSERT INTO DESTINATIONS VALUES
(1, 'GOA', 'INDIA', 'BEACH', 2500),
(2, 'AGRA', 'INDIA', 'HISTORICAL', 1800),
(3, 'BALI', 'INDONESIA', 'NATURE', 3200),
(4, 'ROME', 'ITALY', 'HISTORICAL', 4000),
(5, 'SYDNEY', 'AUSTRALIA', 'ADVENTURE', 2700),
(6, 'PARIS', 'FRANCE', 'BEACH', 4500);
-- Add 10+ trips with varying dates, travelers, and budgets.
INSERT INTO TRIPS VALUES
(1, 3, 'ELAKKIYA', '2023-11-12', '2023-11-25', 42988),
(2, 4, 'KASHIFA', '2023-04-25', '2023-05-01', 10762),
(3, 5, 'LAVANYA', '2023-04-24', '2023-04-28', 38690),
(4, 6, 'SEREESHA', '2023-03-08', '2023-03-22', 23797),
(5, 3, 'SHOBITHA', '2023-08-28', '2023-09-08', 33505),
(6, 5, 'RITHIKA', '2024-02-16', '2024-02-20', 46474),
(7, 4, 'ROJA', '2023-10-24', '2023-10-30', 43058),
(8, 2, 'PRIYA', '2023-07-23', '2023-07-29', 24388),
(9, 5, 'VARSHINI', '2023-12-15', '2023-12-30', 21631),
(10, 2, 'YUVASREE', '2023-11-18', '2023-12-02', 36655);

-- Basic Queries
--  1. Show all trips to destinations in “India”.
SELECT * FROM TRIPS T JOIN DESTINATIONS D ON T.DESTINATION_ID - D.DESTINATION_ID
WHERE D.COUNTRY = 'INDIA';
--  2. List all destinations with an average cost below 3000.
SELECT * FROM DESTINATIONS WHERE AVG_COST_PER_DAY < 3000;

--  Date & Duration
--  3. Calculate the number of days for each trip.
SELECT TRIP_ID, TRAVELER_NAME, DATEDIFF(END_DATE, START_DATE)+1  AS DURATION_DAYS FROM TRIPS;
--  4. List all trips that last more than 7 days.
SELECT TRIP_ID, TRAVELER_NAME, DATEDIFF(END_DATE, START_DATE)+1 AS DURATION_DAYS FROM TRIPS HAVING DURATION_DAYS > 7;

--  JOIN + Aggregation
--  5. List traveler name, destination city, and total trip cost (duration × avg_cost_per_day).
SELECT T.TRAVELER_NAME, D.CITY, (DATEDIFF(END_DATE, START_DATE)+1 * AVG_COST_PER_DAY)  AS TRIP_COST FROM TRIPS T
JOIN DESTINATIONS D ON T.DESTINATION_ID = D.DESTINATION_ID;
--  6. Find the total number of trips per country.
SELECT D.COUNTRY, COUNT(*) AS TOTAL_TRIPS FROM DESTINATIONS D
JOIN TRIPS T ON D.DESTINATION_ID = T.DESTINATION_ID
GROUP BY D.COUNTRY;

--  Grouping & Filtering
--  7. Show average budget per country.
SELECT D.COUNTRY, ROUND(AVG(T.BUDGET)) AS AVG_BUDGET FROM DESTINATIONS D
JOIN TRIPS T ON D.DESTINATION_ID = T.DESTINATION_ID GROUP BY D.COUNTRY;
--  8. Find which traveler has taken the most trips.
SELECT TRAVELER_NAME, COUNT(*) AS TRIP_COUNT FROM TRIPS 
GROUP BY TRAVELER_NAME ORDER BY TRIP_COUNT DESC LIMIT 1;

--  Subqueries
--  9. Show destinations that haven’t been visited yet.
SELECT * FROM DESTINATIONS WHERE DESTINATION_ID  NOT IN (SELECT DESTINATION_ID FROM TRIPS);
--  10. Find the trip with the highest cost per day.
SELECT *, BUDGET / (DATEDIFF(END_DATE, START_DATE) + 1) AS COST_PER_DAY FROM TRIPS
ORDER BY COST_PER_DAY DESC LIMIT 1;

--  Update & Delete
--  11. Update the budget for a trip that was extended by 3 days.
UPDATE TRIPS SET BUDGET = BUDGET + (3 * (SELECT AVG_COST_PER_DAY FROM DESTINATIONS WHERE DESTINATION_ID = TRIPS.DESTINATION_ID))
WHERE TRIP_ID = 4;
--  12. Delete all trips that were completed before Jan 1, 2023
DELETE FROM TRIPS WHERE END_DATE < '2023-01-01';